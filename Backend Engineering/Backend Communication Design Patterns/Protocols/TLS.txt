TLS.txt


HTTPS:



- handshake is performed and keys are shared between client and server
- every subsequent data packet is then encrypted with the key so no one can "peek" inside the packet


Procedure:

- We encrypt with symmetric key algorithms (way faster than asymmetric key)
- We need to exchange the symmetric key
- Key exchanges uses asymmetric key (PKI)
- Authenticate the server
- Extensions (SNI, preshared, 0RTT)

We use both asymmetric and symmetric keys in HTTPS.

The RSA steps (TLS 1.2):


First the client sends hello to the server,

The server then replies with their public key

The client then encrypts their private key with the public key and sends it to the server

The server uses its private key against the public key to decrypt the data and get the client's private key

The client can now encrypt data using its own private key and the server already knows the client's private key so it can just use it to decrypt that data

If someone gets a hold of the server's private key, and they have access to client -server communication they can decrypt all the messages in between by getting the symmetric key (they can just decrypt it using the server's private key, the server's private key remains the same during sessions)


A better algorithm is (TLS 1.3):
 
Diffie Hellman


- Client has public and private key, Client sends private key encrypted with public key

- Server gets the key-pair and generates its own private key using that pair

- Server then uses the private key on the pair to get the symmetric key

- Server sendds its own private key pair 

- Client then uses the private key it has to decrypt the public-private keypair to get the symmetric key

Improvements over TLS 1.2:

- one round trip over 1.2'S two round trips