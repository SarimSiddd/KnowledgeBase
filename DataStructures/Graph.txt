A tree is a connected graph without cycles.

A graph is a collection of nodes with edges between them.

graph can be undirected(bidirectional) or directed (unidirectional).


Types of Graphs:

Adjacency List:

This is the most common way to represent a graph. Every vertex (or node) stores a list of adjacent vertices.
In an undirected graph, an edge like (a, b) would be stored twice: once in a's adjacent vertices and once
in b's adjacent vertices.

Adjacency Matrix:

An adjacency matrix is an NxN boolean matrix (where N is the number of nodes), where a true value at
matrix[ i] [j] indicates an edge from node i to node j. (You can also use an integer matrix with Os and
1 s.)


Graph Search:

The two most common ways to search a graph are depth-first search and breadth-first search.
In depth-first search (DFS), we start at the root (or another arbitrarily selected node) and explore each
branch completely before moving on to the next branch. That is, we go deep first (hence the name depthfirst
search) before we go wide.

In breadth-first search (BFS), we start at the root (or another arbitrarily selected node) and explore each
neighbor before going on to any of their children. That is, we go wide (hence breadth-first search) before
we go deep.

Breadth-first search and depth-first search tend to be used in different scenarios. DFS is often preferred if we
want to visit every node in the graph. Both will work just fine, but depth-first search is a bit simpler.

