React events are named using camelCase, rather than lowercase.
With JSX you pass a function as the event handler, rather than a string.


. You must call preventDefault explicitly.

When you define a component using an ES6 class, a common pattern is for an event handler to be a method on the class

You have to be careful about the meaning of this in JSX callbacks. In JavaScript, class methods are not bound by default.
Generally, if you refer to a method without () after it, such as onClick={this.handleClick}, you should bind that method.


To avoid binding in the constructor:


      <button onClick={() => this.handleClick()}>
        Click me
      </button>


	The problem with this syntax is that a different callback is created each time the LoggingButton renders. In most cases, this is fine. However, if this callback is passed as a prop to lower components, those components might do an extra re-rendering. We generally recommend binding in the constructor or using the class fields syntax, to avoid this sort of performance problem.


<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>
<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>
The above two lines are equivalent, and use arrow functions and Function.prototype.bind respectively.



In both cases, the e argument representing the React event will be passed as a second argument after the ID. With an arrow function, we have to pass it explicitly, but with bind any further arguments are automatically forwarded.

