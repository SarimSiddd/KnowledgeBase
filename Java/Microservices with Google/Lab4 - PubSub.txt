In this lab, you enhance your application to implement a message handling service with Pub/Sub so that it can publish a message to a topic that can then be subscribed and processed by other services.

Pub/Sub is a fully managed, real-time messaging service that enables you to send and receive messages between independent applications. Pub/Sub brings the scalability, flexibility, and reliability of enterprise message-oriented middleware to the cloud. By providing many-to-many, asynchronous messaging that decouples senders and receivers, Pub/Sub enables secure and highly available communication between independently written applications. Pub/Sub delivers low-latency, durable messaging that helps developers quickly integrate systems hosted on the Google Cloud and externally.

1) Enable the Pub Sub API:

gcloud services enable pubsub.googleapis.com

2) Create a PUB/SUB Topic:

gcloud pubsub topics create messages


3) Add dependency in pom.xml:


        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-gcp-starter-pubsub</artifactId>
        </dependency>

4) Publish message to the backend service with PubSub:

import org.springframework.cloud.gcp.pubsub.core.*;

    @Autowired
    private PubSubTemplate pubSubTemplate;

    pubSubTemplate.publish("messages", name + ": " + message);

5) Creating a subscription:

Before subscribing to a topic, you must create a subscription. Pub/Sub supports pull subscription and push subscription. With a pull subscription, the client can pull messages from the topic. With a push subscription, Pub/Sub can publish messages to a target webhook endpoint.

A topic can have multiple subscriptions. A subscription can have many subscribers. If you want to distribute different messages to different subscribers, then each subscriber needs to subscribe to its own subscription. If you want to publish the same messages to all the subscribers, then all the subscribers must subscribe to the same subscription.

Pub/Sub messages are delivered "at least once." Thus, you must deal with idempotence and you must deduplicate messages if you cannot process the same message more than once.

In this task, you create a Pub/Sub subscription and then test it by pulling messages from the subscription before and after using the frontend application to post a message.


a) Create a new subscription:

gcloud pubsub subscriptions create messages-subscription-1 \
  --topic=messages

b) Pull messages posted to the subscription:

gcloud pubsub subscriptions pull messages-subscription-1

The message remains posted until it is acknowledged

c) Auto-ack messages to the subscription:

gcloud pubsub subscriptions pull messages-subscription-1 --auto-ack


6) Processing messages in subscriptions:


a) Generate new spring project:

cd ~
curl https://start.spring.io/starter.tgz \
  -d dependencies=web,cloud-gcp-pubsub \
  -d bootVersion=2.4.6.RELEASE \
  -d baseDir=message-processor | tar -xzvf -


b) Add imports:

import org.springframework.context.annotation.Bean;
import org.springframework.boot.ApplicationRunner;
import com.google.cloud.spring.pubsub.core.*;

c)     @Bean
    public ApplicationRunner cli(PubSubTemplate pubSubTemplate) {
        return (args) -> {
            pubSubTemplate.subscribe("messages-subscription-1",
                (msg) -> {
                    System.out.println(msg.getPubsubMessage()
                        .getData().toStringUtf8());
                    msg.ack();
                });
        };
    }



    We added the Web starter simply because it's much easier to put Spring Boot application into daemon mode, so that it doesn't exit immediately. There are other ways to create a Daemon, e.g., using a CountDownLatch, or create a new Thread and set the daemon property to true. But since we are using the Web starter, make sure that the server port is running on a different port to avoid port conflicts.


 7) Test the application

