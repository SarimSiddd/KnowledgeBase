
Focusing on polymorphism which has:

Types: Open set

Operations: Closed set

The inverse is std::variant




Static Polymorphism (templates):


Overloading:

- Determines which function to call at compile time based on function parameters
- No runtime overhead


Pros:

- Low boilerplate
- Easy adaptation of existing class
- Value semantics
- Low coupling
- PPP (Polymorphism by definition depends on the usage)
- Performance

Cons:

- Requires everything to be a template and live in header files
- Can't store in runtime containers

Dynamic Polymorphism (virtual functions):



Pros:

- Able to used in non-template functions
- Able to be used in run-time containers


Cons:

- Low boilerplate, now need inheritance heirarchy
- Have to inherit from base
- performance
- value semantics - now pointer semantics
- Low coupling only if youre careful
- PPP (Parent's polymorphic principles) -  Polymorphic types have to inherit from base


A good middle ground:

std::function

- Low boilerpolate
- Easy adaptation of existing class
- Value semantics
- Low coupling
- PPP
- Performance - kinda
- Able to be used in non-template functions
- Able to be stored in run-time containers


The runtime concept idiom49,50 was created by Sean Parent.51 The idiom separates a system’s runtime polymorphic-processing logic from the types it processes polymorphically. Those types do not need to be part of a class hierarchy, so they do not need to override a base-class’s virtual functions.

Runtime Polymorphism with Type Erasure
C++ type erasure53 is a template-based technique for implementing runtime polymorphism using duck typing. Templates enable you to remove specific types (that is, erase those types) from the code you write. Unlike using std::variant (Section 10.13), type erasure does not require you to know in advance the types you’ll process polymorphically. The runtime concept idiom uses type erasure under the hood.

Double dispatch
 (also called the visitor pattern74) is a runtime polymorphism technique that uses the runtime types of two objects to determine the correct member function to call. Double dispatch also can be implemented using std::variant and std::visit

Compile-Time (Static) Polymorphism Techniques:

SFINAE: Substitution Failure Is Not an Error

C++20 Concepts


Tag Dispatch


is a template-based technique in which the compiler determines the version of an overloaded function to call based not only on template type parameters but also on properties of those types. Bjarne Stroustrup in his paper, “Concepts: The Future of Generic Programming,” refers to properties of types as “concepts” and calls the tag-dispatching technique concept overloading or concept-based overloading.71 He then discusses how C++20’s new concepts feature can be used in place of tag dispatch.







