Universal References:
The term "universal reference" was coined by Scott Meyers in his book "Effective Modern C++." A universal reference is a specific kind of reference that can bind to both lvalues and rvalues. The syntax for a universal reference looks like T&&, where T is a template parameter type.

The crucial aspect of a universal reference is the circumstances under which it behaves differently:

Deduction Context: A universal reference only emerges during template argument deduction when auto or a template parameter with type deduction (T&&) is involved.
Binding Behavior:
If a universal reference binds to an lvalue, it deduces its type as an lvalue reference.
If it binds to an rvalue, it deduces its type as an rvalue reference.
cpp
Copy code
template <typename T>
void foo(T&& t) {
    // Here, t is a universal reference
}

int main() {
    int x = 5;
    foo(x);  // T is deduced as int& (lvalue reference)
    foo(5);  // T is deduced as int&& (rvalue reference)
}
Forward References:
The term "forwarding reference" is often used interchangeably with "universal reference," but it's essential to recognize the context. When we say "forwarding reference," we're typically referring to the use of universal references in the context of perfect forwarding.

Perfect Forwarding: Forwarding references enable perfect forwarding, which means preserving the value category (lvalue or rvalue) and cv-qualifiers (const or volatile) of the forwarded argument.
Usage in Templates: Forwarding references are typically seen as function parameters in templates, especially in conjunction with variadic templates. They are instrumental in forwarding arguments to other functions or constructors, preserving their original value category.
cpp
Copy code
template <typename T>
void forwarder(T&& arg) {
    // arg is a forwarding reference here
    some_function(std::forward<T>(arg));
}

void some_function(int&&) {
    // Handle rvalue reference
}

void some_function(int&) {
    // Handle lvalue reference
}

int main() {
    int x = 5;
    forwarder(x);  // Calls some_function with lvalue
    forwarder(5);  // Calls some_function with rvalue
}
Key Difference:
Scope and Context:
Universal references arise from template argument deduction and can bind to both lvalues and rvalues.
Forwarding references are a special use-case of universal references specifically designed for perfect forwarding in template functions.
Intent:
Universal references are a type-deduction mechanism.
Forwarding references facilitate the forwarding of arguments while preserving their value categories.