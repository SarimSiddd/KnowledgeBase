- Concepts specify requirements explicitly in code
- Compiler can determine that a type is not compatible with a template before instantiating it
	- Fewer more precise error messages
	- Potential compile-time performance improvements
- Overload function templates with same signature


requires std::integral<T>

requires std::floating_point<T>


bool is_power_of_2 (std::integral auto i)
{
	//Integral impl.
}

template <std::floating_point T>
bool is_power_of_2 (T x)
{
	//floating point impl.
}

//Useful for library usage

template <typename T>
concept airthmetic = std::integral<T> || std::floating_point<T>

template <typename T>
concept my_number = airthmetic<T> && sizeof(T) <= 8


auto f (my_number auto x)
{
	
}

//Creating concepts using type traits:

template <typename T>
concept Numeric = std::integeral<T> || std::floating_point<T>

requires clause function template's signature:

template<typename T>
T multiply (T first, T second ) requires Numeric<T>{

}

Required:
- Member function defined in a template class does not have the template header
- Use trailing requires clause

For a single concept-constrained type parameter, we can do:

template<Numeric T>
T multiply (T first, T second ) {}

- arguments must have the same type

// abbreviated function template with constrained auto
auto multiple (Numeric auto first, Numeric auto second){
}

// Can you spot the difference?
In the second one we can call the function with 2 different data types


Concept-based overloading:

We can overload based on type requirements:

- std::distance
- std::advance

Creating own concepts:

Simple requirements:

- simply checks if the expression is valid
- can contain operator expressions
std::range concept:


template <class T>
concept range = 
requires (T & t){
	std::ranges::begin(t);
	std::ranges::end(t);
};

Type requirements:

- determines wether specified type is valid

template <typename T>
concept HasValueType = requires {
	typename T::value_type;
};

T satisfies HasValueType only if T::value_type is valid type

Compound requirement:

- expression also having requirements on its result

e.g. : <iterator>

requires (I i)
{
	{i ++ } -> 	same_as<I>;
}

- must also be weakly_incrementable
{++i } -> same_as <I&>;

Nested requirement
Ad-hoc constraint:

-Useful if you need to use the constraint only once

template<typename T>
	requires requires (const T& t)
	{
		std::ranges::begin(t);
		std::ranges::end(t);
	}
void printRange(const T& range)
{
	for (const auto& item : range)
	{
		std::cout << item << std::endl;
	}
}



As you view the C++20 range-based algorithms’ documentation, you’ll often see in their prototypes the following C++20 iterator concepts, which are defined in namespace std in the <iterator> header:

input_iterator

output_iterator

forward_iterator

bidirectional_iterator

random_access_iterator

contiguous_iterator

The range concept describes a type with a begin iterator and an end sentinel, possibly of different types. You’ll often see the following C++20 ranges concepts in the C++20 range-based algorithms’ prototypes:

input_range—a range that supports input_iterators

output_range—a range that supports ouput_iterators

forward_range—a range that supports forward_iterators

bidirectional_range—a range that supports bidirectional_iterators

random_access_range—a range that supports random_access_iterators

contiguous_range—a range that supports contiguous_iterators

Any container that supports begin and end iterators can be treated as a C++20 range.