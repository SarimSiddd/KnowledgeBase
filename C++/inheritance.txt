when a derived class inherits from a base class, the access specifiers may change
depending on the method of inheritance. There are three different ways for classes to inherit from
other classes: public, private, and protected.

If you do not choose an inheritance type, C++ defaults to private inheritance (just like members
default to private access if you do not specify otherwise).


class Base
{
public:
int m_nPublic;

private:
int m_nPrivate;
protected:
int m_nProtected;
};

Base can access itâ€™s own members without restriction. The public can only access m_nPublic.
Derived classes can access m_nPublic and m_nProtected.

class D2: private Base
{
public:
int m_nPublic2;
private:
int m_nPrivate2;
protected:
int m_nProtected2;
}

Modes of Inheritance

Public mode: If we derive a sub class from a public base class. Then the public member of the base class will become public in the derived class and protected members of the base class will become protected in derived class.
Protected mode: If we derive a sub class from a Protected base class. Then both public member and protected members of the base class will become protected in derived class.
Private mode: If we derive a sub class from a Private base class. Then both public member and protected members of the base class will become Private in derived class. 

Multiple INheritance:

Diamond problem can be solved by virtual inheritance
class D2 : virtual public Base{}

Only one copy of the most sbase object is allowed to be passed down