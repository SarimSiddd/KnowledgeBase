#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <set>
#include <cassert>
using namespace std;

struct Node{
   Node* next;
   Node* prev;
   int value;
   int key;
   Node(Node* p, Node* n, int k, int val):prev(p),next(n),key(k),value(val){};
   Node(int k, int val):prev(NULL),next(NULL),key(k),value(val){};
};

class Cache{
   
   protected: 
   map<int,Node*> mp; //map the key to the node in the linked list
   int cp;  //capacity
   Node* tail; // double linked list tail pointer
   Node* head; // double linked list head pointer
   virtual void set(int, int) = 0; //set function
   virtual int get(int) = 0; //get function

};

class LRUCache: public Cache {

    private:
        int elemCount;
    public:

    LRUCache(int capacity) {
        head=NULL;
        tail=NULL;
        cp = capacity;
        elemCount = 0;
    }

    void set(int key,int value){
        
        //LL is null; if head doesn't point to anything
        if (head==NULL){    
            //make head point to a new Node;
            head = new Node (key,value);
            //make tail also point to where head is pointing
            tail = &(*head);
            //increase element count;
            ++elemCount;
        }

        //LL reaches capacity; remove the tail
        //else if (elemCount==cp){
        //    head = head->next;
        //    tail->prev = &(*tail);   
        //    tail->next = new Node(key,value);
        //    tail = tail->next;
        //}   

        else{                     
            //when head->next is null
            Node * temp = head;
            if (head->next==NULL){
                head = new Node(key,value);
                head -> next = &(*temp);
                temp -> prev = &(*head);
            }

            //when head->next is not null
            else {
                head = new Node(key,value);
                head -> next = &(*temp);
                temp -> prev = &(*head);
            }
            ++elemCount;
            //tail is still on the heap, how do we delete this node from heap?
            if (elemCount ==cp){
                tail = tail->prev;
                delete(tail->next);
                tail->next = NULL;
                //cout << "RAN" << endl;
            }
        }

        //cout << "ELEMENT COUNT IS " << elemCount;
    }

    void printLL(Node * temp){

            cout << "Key is " << temp->key << " Value is " << temp->value;

    }


    int get(int key){
        
        Node * temp = head;

        while (temp!=NULL){
            
            if (temp->key==key)
                return temp->value;
            
            temp = temp->next;
        }

        return -1;
    }

};

int main() {
   int n, capacity,i;
   cin >> n >> capacity;
   LRUCache l(capacity);
   for(i=0;i<n;i++) {
      string command;
      cin >> command;
      if(command == "get") {
         int key;
         cin >> key;
         cout << l.get(key) << endl;
      } 
      else if(command == "set") {
         int key, value;
         cin >> key >> value;
         l.set(key,value);
      }
   }
   return 0;
}
