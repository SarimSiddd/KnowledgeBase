Caching is the ability to retrieve often used data quickly, so the data needs to be stored somewhere for it to be retrieved. The std::vector is most often used for this since it is guaranteed to be stored in contiguous memory which allows the linear search to be efficiently performed. Now most caching solutions involve a Least recently used algorithm to remove least recently used data from the container so the most recently used is near the front of the container which supports fast search times.
Using const variables will allow the compiler to store the value in the register for quick retrieval later The register keyword can be used to tell the compiler that it will be accessed a lot and to keep the variable in a machine register. For instance, you may put a loop index in a register as it will be accessed many time around the loop which would give a performance benefit. For example,

for(register int i = 0; i < 9999999; i++){}
When accessing array indices try to do it sequentially as that's what the machine is expecting i.e. array[j][t] is followed by array[j][t+1] but array[j+1][t] is probably still in ram memory and not the cache.

Data alignment can also help with cache access. When memory is read by the cpu it reads it in as multiples of word size. By aligning your data with the boundaries of multiples of word size you make the cache read/writes more efficient. In c++11 we have the alignas and alignof keywords, alignas allows us to align a variable to a multiple number of bytes and alignof gives us the required alignment of a type in bytes. For example.

#include <iostream>
#include <vector>
#include <ctime>

using namespace std;

int main(){

    std::vector<int> myvec;
    std::vector<int> myvec2;
    clock_t clock_time;

    clock_time = clock();
    for(int i = 0; i < 9999999; i++) {
        myvec.push_back(999);
    }
    clock_time = clock() - clock_time;

    printf("Loop without index in register took %f seconds \n", ((float)clock_time/CLOCKS_PER_SEC));
    //clear vector.
    myvec.clear();

    //start timer
    clock_time = clock();
    for (register int t = 0; t < 9999999; t++) {
        myvec2.push_back(999);
    }
    clock_time = clock() - clock_time;
    //end timer.

    //clear vector.
    myvec2.clear();


    printf("Loop with index in register took %f seconds \n", ((float)clock_time / CLOCKS_PER_SEC));

    //c++11 alignment keywords
    alignas(16) int a[4];
    alignas(1024) int b[4];

    //Output padded results
    printf("%p\n", a);
    printf("%p\n", b);

    if (_alignof(a) == 16) {
        cout << "int b aligned to 16 bytes" << endl;
    }

    if(_alignof(b) == 1024) {
        cout << "int b aligned to 1024 bytes" << endl;
    }

    return 0;
}
This code demonstrates the use of the register key word in a loop and also alignas and alignof keywords. The above code gave me the following output on my machine.

Loop with index in register took 24.811001 seconds
Loop without index in register took 25.607000 seconds
0018F390
0018EC00
int b aligned to 16 bytes
int b aligned to 1024 bytes
Press any key to continue . . .
