Taken from:

https://www.youtube.com/watch?v=ZTqHjjm86Bw

Where to use co-routines:

- We can replace some function pointers (callbacks) with co-routines
- Parsers are much more readable with co-routines
- A lot of state maintainence code is not required, as the co-routine does the bookkeeping

What is a co-routine made of?

- A wrapper type. Return type of the co-routine functions prototype.
  Allows us to control the coroutine from the outside (resume, yield etc)
- The compiler looks for a type with the exact name promise_type inside the return type of
  the coroutine (wrapper type). This is the control from the inside.
  This can be:
  - type alias
  - typedef
  - or you can declare the type directly inside the coroutine wrapper type

 - An awaitable type that comes into play once we use co_await
 - We also often use another part, an iterator


 - A coroutine is an finite state machine that can be controlled and customized by promise_type

  
A task:

A coroutine that does a job without returning a value.

A generator:

A coroutine that does a job and returns a value (either by co_return or co_yield)

For yeild_value, initial_suspend, final_suspend, as well as co_await/await_transform, we have two helper types in the STL:

std::suspend_always: The method await_ready always returns false, indicating that an await expression always suspends as it waits for its value

std::suspend_never: The method await_ready always returns true, indicating that an await expression never suspends.

Try to pass data into coroutine by value, since it maintains it in coroutine frame, if you pass by reference make sure the data lives long enough


What is a co-routine?

A coroutine is a generalization of a subroutine

A subroutines can be 

- invoked by its caller
- can return control back to its caller

A simple function is also a subroutine

A coroutine has these properties but also:

- can suspend execution and return control to its caller
- can resume execution after being suspended

A function can either be a subroutine or a coroutine


Coroutine:

Invoke:

f()

Return:

co_return

suspend:

co_await

resume:

coroutine_handle<>::resume()

Whether a function is a coroutine is an implementation detail


A function is a co-routine if it contains:

a co_return statement , Action: Output, State: Ended
a co_await statement, Action: Input, State: Suspended
a co_yield expression, Action: Output, State: Suspended
or a range based for loop that uses co_await


To await on something, it has provide 3 things:

struct awaitable_concept{
	

	bool await_ready();
	void await_suspend(coroutine_handle<>);
	auto await_resume();

}

The simplest awaitable: suspend_always
suspend_never


coroutine_handle

further reading:

resumable_thing impl.

stackless (state is stored on the heap) vs stackfull coroutines